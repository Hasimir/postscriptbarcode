%!PS

% Barcode Writer in Pure PostScript
% http://bwipp.terryburton.co.uk
%
% Copyright (c) 2004-2014 Terry Burton
%
% $Id$
%
% Permission is hereby granted, free of charge, to any
% person obtaining a copy of this software and associated
% documentation files (the "Software"), to deal in the
% Software without restriction, including without
% limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of
% the Software, and to permit persons to whom the Software
% is furnished to do so, subject to the following
% conditions:
%
% The above copyright notice and this permission notice
% shall be included in all copies or substantial portions
% of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
% KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
% THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
% PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
% THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
% CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
% IN THE SOFTWARE.

% --BEGIN RENDERER renmatrix--
% --REQUIRES preamble raiseerror--
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /uk.co.terryburton.bwipp findresource put
begin
/renmatrix {

    20 dict begin

    /args exch def

    % Default options
    /width 1 def
    /height 1 def
    /barcolor (unset) def
    /backgroundcolor (unset) def
    /gridfit false def
    /griddpi 0 def

    % Apply the renderer options and the user options
    args {def} forall
    opt {def} forall

    /width width cvr def
    /height height cvr def
    /barcolor barcolor cvlit def
    /backgroundcolor backgroundcolor cvlit def
    /griddpi griddpi cvr def

    % If this is Jaws distiller and "hardware" resolution is 1 point, cancel gridfit since resolution is bogus
    gridfit systemdict /distillerstuff known and griddpi 0 eq and {
        gsave initmatrix 1 0 dtransform 2 copy lt {exch} if pop grestore
        1 eq {/gridfit false def} if
    } if

    % Set RGB or CMYK color depending on length of given hex string
    /setanycolor {
        /anycolor exch def
        anycolor length 6 eq {
            (<      >) 8 string copy dup 1 anycolor putinterval cvx exec {255 div} forall setrgbcolor
        } if
        anycolor length 8 eq {
            (<        >) 10 string copy dup 1 anycolor putinterval cvx exec {255 div} forall setcmykcolor
        } if
    } bind def

    % Draw the image
    gsave
    currentpoint translate

    gridfit {
        griddpi 0 eq {
            % Force lowest square resolution to ensure that squares stay that way
            72 72 dtransform abs exch abs 2 copy gt {exch} if pop
            /griddpi exch def
        } if

        matrix currentmatrix

        % Measure using default transform where 1 = 1pt.
        gsave initmatrix

        % Determine x & y scales needed to force ctm to scale to griddpi
        72 0 dtransform abs exch abs 2 copy lt {exch} if pop griddpi exch div  % Hardware-reported xres
        0 72 dtransform abs exch abs 2 copy lt {exch} if pop griddpi exch div  % Hardware-reported yres
        grestore

        % Scale ctm by scaling of initmatrix's xres vs. griddpi
        [ 3 -1 roll 0 0 5 -1 roll 0 0 ] 1 index concatmatrix
        /gridmatrix exch def

        % Snap basepoint to grid
        0 0 gridmatrix transform ceiling exch ceiling exch gridmatrix itransform matrix translate
        dup concat
        gridmatrix dup concatmatrix pop

        % Scale the ctm to force 1 matrix col & row to an even grid multiple.
        % Only compute X-dim since we've forced resolution to be square and we don't want to
        % get into finding least common denominators & most barcodes are square anyway with the
        % exception of PDF417 (non-square pixels & y-dimensions are much less critical anyway).
        /pixw width 72 mul pixx div def
        /pixh height 72 mul pixy div def
        pixw pixh gridmatrix dtransform
        2 {
            exch
            dup abs .00001 gt {  % Skip 0-valued component
                dup abs 1 lt {  %  Never gridfit non-zero width to < 1 pixel
                    0 gt {1}{-1} ifelse
                } {  % Snap to grid
                     width 0 eq {  % If no width specified, total width can be adjusted at will
                         round
                     } {  % Width was specified, round down since user probably has limited x-space
                         dup 0 lt {ceiling} {floor} ifelse
                     } ifelse
                } ifelse
            } if
        } repeat
        gridmatrix idtransform pixh div exch pixw div exch matrix scale
        dup concat
        gridmatrix dup concatmatrix pop
    } if

    width pixx div 72 mul height pixy div 72 mul
    gridfit {
        gridmatrix dtransform round exch round exch gridmatrix idtransform
    } if
    scale
    0 0 moveto pixx 0 lineto pixx pixy lineto 0 pixy lineto closepath
    backgroundcolor (unset) ne { gsave backgroundcolor setanycolor fill grestore } if 
    barcolor (unset) ne { barcolor setanycolor } if
    /xyget {pixx mul add get} bind def
    newpath
    0 1 pixs length 1 sub {
        dup pixx mod /x exch def
        pixx idiv /y exch def
        pixs x y xyget 1 eq {
           x pixy y sub 1 sub moveto
           0 1 rlineto
           1 0 rlineto
           0 -1 rlineto
           -1 0 rlineto
           closepath
        } if
    } for
    fill
    grestore

    end

} bind def
/renmatrix dup load /uk.co.terryburton.bwipp defineresource pop
end
/setpacking where {pop setpacking} if
% --END RENDERER renmatrix--
