%!PS

% Barcode Writer in Pure PostScript
% http://bwipp.terryburton.co.uk
%
% Copyright (c) 2004-2014 Terry Burton
%
% $Id$
%
% Permission is hereby granted, free of charge, to any
% person obtaining a copy of this software and associated
% documentation files (the "Software"), to deal in the
% Software without restriction, including without
% limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of
% the Software, and to permit persons to whom the Software
% is furnished to do so, subject to the following
% conditions:
%
% The above copyright notice and this permission notice
% shall be included in all copies or substantial portions
% of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
% KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
% THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
% PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
% THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
% CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
% IN THE SOFTWARE.

% --BEGIN RENDERER renmatrix--
% --REQUIRES preamble raiseerror--
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /uk.co.terryburton.bwipp findresource put
begin
/renmatrix {

    20 dict begin

    /args exch def

    % Default options
    /width 1 def
    /height 1 def
    /barcolor (unset) def
    /backgroundcolor (unset) def
    /inkspread 0 def
    /inkspreadh 0 def
    /inkspreadv 0 def
    /gridfit false def
    /griddpi 0 def

    % Apply the renderer options and the user options
    args {def} forall
    opt {def} forall

    /width width cvr def
    /height height cvr def
    /barcolor barcolor cvlit def
    /backgroundcolor backgroundcolor cvlit def
    /inkspread inkspread cvr def
    /inkspreadh inkspreadh cvr def
    /inkspreadv inkspreadv cvr def
    /griddpi griddpi cvr def

    % If this is Jaws distiller and "hardware" resolution is 1 point, cancel gridfit since resolution is bogus
    gridfit systemdict /distillerstuff known and griddpi 0 eq and {
        gsave initmatrix 1 0 dtransform 2 copy lt {exch} if pop grestore
        1 eq {/gridfit false def} if
    } if

    inkspread 0 ne {/inkspreadh inkspread def} if
    inkspread 0 ne {/inkspreadv inkspread def} if

    /xyget      { pixx mul add pixs exch get                   } bind def
    /xyinvert   { pixx mul add pixs exch 2 copy get 1 xor put  } bind def
    /mxyget     { pixx mul add m exch get 2#001 and            } bind def
    /mxyset     { pixx mul add m exch 3 -1 roll put            } bind def
    /msetborder { pixx mul add m exch 2 copy get 2#010 or put  } bind def
    /mborderoff { pixx mul add m exch 2 copy get 2#100 or put  } bind def
    /misborder  { pixx mul add m exch get 2#110 and 2#010 eq   } bind def
    /mclear     { pixx mul add m exch 2 copy get 2#001 and put } bind def
    /mclear4 {
        2 copy                       mclear
        2 copy 1 add                 mclear
        2 copy exch 1 add exch       mclear
        2 copy exch 1 add exch       mclear
               1 add exch 1 add exch mclear
    } bind def

    /trace {
        % Walk the outline of a region emitting edge coordinates of the path
        /y exch def  /x exch def
        % dir 0:right 1:down 2:left 3:up
        % hug 0:right 1:left
        /dir x 1 add y 1 add mxyget def  /hug dir def
        /sx x def  /sy y def  /sdir dir def
        mark [x y] {
            x 1 add y
            x 1 add y 1 add
            x       y 1 add
            x       y
            8 dir 2 mul neg roll
            /Dy exch def  /Dx exch def  /D Dx Dy xyget def
            /Cy exch def  /Cx exch def  /C Cx Cy xyget def
            /By exch def  /Bx exch def  /B Bx By xyget def
            /Ay exch def  /Ax exch def  /A Ax Ay xyget def
            A B eq {
                A C eq {/L} {/R} ifelse
            } {
                A C eq B D eq and {
                    A 0 eq hug 0 eq xor {/R} {/F} ifelse
                } {
                    /F
                } ifelse
            } ifelse
            dup /F eq {
                pop
                dir 0 eq {/x x 1 add def} if
                dir 1 eq {/y y 1 add def} if
                dir 2 eq {/x x 1 sub def} if
                dir 3 eq {/y y 1 sub def} if
                hug 0 eq {
                    Ax Ay msetborder
                } {
                    Bx By msetborder
                } ifelse
            } {
                /L eq {
                    /dir dir 3 add 4 mod def
                    hug 1 eq {
                         Bx By msetborder
                         Dx Dy mborderoff
                    } if
                } {  % R
                    /dir dir 1 add 4 mod def
                    hug 0 eq {
                         Ax Ay msetborder
                         Cx Cy mborderoff
                    } if
                } ifelse
                [x y]
            } ifelse
            x sx eq y sy eq and dir sdir eq and {exit} if
        } loop
        counttomark array astore exch pop

        % Invert the interior of the path
        /x x 1 add def /y y 1 add def
        /t x y mxyget 1 xor def
        mark x y {
            counttomark 0 eq {exit} if
            /y exch def /x exch def
            x y mxyget t ne {
                0          x 1 sub -1 0          {dup y misborder {exch pop exit} if pop} for
                pixx 1 sub x 1 add  1 pixx 1 sub {dup y misborder {exch pop exit} if pop} for
                1 exch {  % From left to right border
                    /i exch def
                    i y misborder not {
                        t i y mxyset
                        i y xyinvert
                    } if
                    i y 1 sub mxyget t ne i y 1 sub misborder not and {i y 1 sub} if
                    i y 1 add mxyget t ne i y 1 add misborder not and {i y 1 add} if
                } for
            } if
        } loop
        pop

        % Walk the path to clear the border information
        dup 0 get aload pop /y1 exch def /x1 exch def
        dup dup length 1 sub 1 exch getinterval {
            aload pop /y2 exch def /x2 exch def
            x2 x1 gt { x1  2 x2 1 sub {y1      mclear4} for } if
            y2 y1 gt { y1  2 y2 1 sub {x1 exch mclear4} for } if
            x2 x1 lt { x1 -2 x2 1 add {y1      mclear4} for } if
            y2 y1 lt { y1 -2 y2 1 add {x1 exch mclear4} for } if
            /x1 x2 def /y1 y2 def
        } forall

        % Discard duplicate final point
        dup length 1 sub 0 exch getinterval

    } bind def

    % Pad the bitmap on all sides
    /pixs [
        pixx 2 add {0} repeat
        0 pixx pixs length 1 sub {
            0 exch
            pixs exch pixx getinterval aload pop
            0
        } for
        pixx 2 add {0} repeat
    ] def
    /pixx pixx 2 add def
    /pixy pixy 2 add def

    % Track inverted regions and working space
    /m [ pixs length {0} repeat ] def

    % Construct paths by tracing and inverting each dark region
    /paths [
        0 1 pixy 1 sub {
            /j exch def
            0 1 pixx 1 sub {
                /i exch def
                i j xyget 1 eq {
                    i 1 sub j 1 sub trace
                } if
            } for
        } for
    ] def

    % Revert the bitmap size
    /pixx pixx 2 sub def
    /pixy pixy 2 sub def

    % Set RGB or CMYK color depending on length of given hex string
    /setanycolor {
        /anycolor exch def
        anycolor length 6 eq {
            (<      >) 8 string copy dup 1 anycolor putinterval cvx exec {255 div} forall setrgbcolor
        } if
        anycolor length 8 eq {
            (<        >) 10 string copy dup 1 anycolor putinterval cvx exec {255 div} forall setcmykcolor
        } if
    } bind def

    % Draw the image
    gsave
    currentpoint translate

    gridfit {
        griddpi 0 eq {
            % Force lowest square resolution to ensure that squares stay that way
            72 72 dtransform abs exch abs 2 copy gt {exch} if pop
            /griddpi exch def
        } if

        matrix currentmatrix

        % Measure using default transform where 1 = 1pt.
        gsave initmatrix

        % Determine x & y scales needed to force ctm to scale to griddpi
        72 0 dtransform abs exch abs 2 copy lt {exch} if pop griddpi exch div  % Hardware-reported xres
        0 72 dtransform abs exch abs 2 copy lt {exch} if pop griddpi exch div  % Hardware-reported yres
        grestore

        % Scale ctm by scaling of initmatrix's xres vs. griddpi
        [ 3 -1 roll 0 0 5 -1 roll 0 0 ] 1 index concatmatrix
        /gridmatrix exch def

        % Snap basepoint to grid
        0 0 gridmatrix transform ceiling exch ceiling exch gridmatrix itransform matrix translate
        dup concat
        gridmatrix dup concatmatrix pop

        % Scale the ctm to force 1 matrix col & row to an even grid multiple.
        % Only compute X-dim since we've forced resolution to be square and we don't want to
        % get into finding least common denominators & most barcodes are square anyway with the
        % exception of PDF417 (non-square pixels & y-dimensions are much less critical anyway).
        /pixw width 72 mul pixx div def
        /pixh height 72 mul pixy div def
        pixw pixh gridmatrix dtransform
        2 {
            exch
            dup abs .00001 gt {  % Skip 0-valued component
                dup abs 1 lt {  %  Never gridfit non-zero width to < 1 pixel
                    0 gt {1}{-1} ifelse
                } {  % Snap to grid
                     width 0 eq {  % If no width specified, total width can be adjusted at will
                         round
                     } {  % Width was specified, round down since user probably has limited x-space
                         dup 0 lt {ceiling} {floor} ifelse
                     } ifelse
                } ifelse
            } if
        } repeat
        gridmatrix idtransform pixh div exch pixw div exch matrix scale
        dup concat
        gridmatrix dup concatmatrix pop
    } if

    width pixx div 72 mul height pixy div 72 mul
    gridfit {
        gridmatrix dtransform round exch round exch gridmatrix idtransform
    } if
    scale

    /inkspreadh inkspreadh 2 div def
    /inkspreadv inkspreadv 2 div def
    0 0 moveto pixx 0 lineto pixx pixy lineto 0 pixy lineto closepath
    backgroundcolor (unset) ne { gsave backgroundcolor setanycolor fill grestore } if
    barcolor (unset) ne { barcolor setanycolor } if
    newpath
    paths {
        /p exch def
        /len p length def
        p len 1 sub get aload pop
        p 0 get aload pop
        0 1 len 1 sub {                                % x1 y1 x2 y2
            /i exch def
            p i 1 add len mod get aload pop 6 -2 roll  % x3 y3 x1 y1 x2 y2
            5 index inkspreadh
            4 index 4 -1 roll lt {add} {sub} ifelse    % y3<y1 ? x2+i : x2-i
            4 1 roll
            4 index inkspreadv
            4 index 4 -1 roll gt {add} {sub} ifelse    % x3>x1 ? y2+i : y2-i
            4 -1 roll exch pixy exch sub
            i 0 eq {moveto} {lineto} ifelse
        } for                                          % x2 y2 x3 y3
        closepath
        pop pop pop pop
    } forall
    fill
    grestore

    end

} bind def
/renmatrix dup load /uk.co.terryburton.bwipp defineresource pop
end
/setpacking where {pop setpacking} if
% --END RENDERER renmatrix--
