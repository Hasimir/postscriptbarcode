{"name":"Barcode Writer in Pure PostScript","tagline":"","body":"Barcode Writer in Pure Postscript generates all barcode formats entirely within PostScript so that the process of converting the input data into the printed output can be performed by the printer or RIP itself. This is ideal for variable data printing (VDP) and avoids the need to re-implement the barcode generation process whenever your language needs change.\r\n\r\nIt makes including any barcode within a PostScript document as simple as inserting the following directive:\r\n\r\n```\r\n0 0 moveto (978-1-86074-271) (includetext) /isbn /uk.co.terryburton.bwipp findresource exec\r\n```\r\n\r\nFeatures\r\n--------\r\n\r\nBWIPP supports all major barcode symbologies including:\r\n\r\n[EAN-13](EAN-13) (EAN, UCC-13, JAN, JAN-13, EAN-13+2, EAN-13+5, EAN-99), [EAN-8](EAN-8) (UCC-8, JAN-8, EAN-8+2, EAN-8+5, EAN-Velocity), [UPC-A](UPC-A) (UPC, UCC-12, UPC-A+2, UPC-A+5), [UPC-E](UPC-E) (UPC-E0, UPC-E1, UPC-E+2, UPC-E+5), [ISBN](ISBN) (ISBN-13, ISBN-10, Bookland EAN-13), [ISMN](ISMN), [ISSN](ISSN), [EAN-5](EAN-5) & [EAN-2](EAN-2) (EAN/UPC add-ons), [GS1 DataBar Omnidirectional](GS1-DataBar-Omnidirectional) (RSS-14), [GS1 DataBar Stacked](GS1-DataBar-Stacked) (RSS-14 Stacked), [GS1 DataBar Stacked Omnidirectional](GS1-DataBar-Stacked-Omnidirectional) (RSS-14 Stacked Omnidirectional), [GS1 DataBar Truncated](GS1-DataBar-Truncated) (RSS-14 Stacked), [GS1 DataBar Limited](GS1-DataBar-Limited) (RSS Limited), [GS1 DataBar Expanded](GS1-DataBar-Expanded) (RSS Expanded), [GS1 DataBar Expanded Stacked](GS1-DataBar-Expanded-Stacked) (RSS Expanded Stacked), [GS1-128](GS1-128) (UCC/EAN-128, EAN-128, UCC-128), [SSCC-18](SSCC-18) (EAN-18, NVE), [EAN-14](EAN-14) (UCC-14), [ITF-14](ITF-14) (UPC SCS), [QR Code](QR-Code) (Quick Response Code, Micro QR Code), [GS1 QR Code](GS1-QR-Code), [Data Matrix](Data-Matrix) (Data Matrix ECC 200), [GS1 DataMatrix](GS1-DataMatrix), [Aztec Code](Aztec-Code) (Compact Aztec Code, Aztec Runes), [PDF417](PDF417) (Truncated PDF417), [MicroPDF417](MicroPDF417), [MaxiCode](MaxiCode) (UPS Code, Code 6), [Codablock F](Codablock-F), [Code 16K](Code-16K) (USS-16K), [Code 49](Code-49) (USS-49), [Code One](Code-One) (Code 1, Code 1S), [USPS POSTNET](USPS-POSTNET), [USPS PLANET](USPS-PLANET), [USPS Intelligent Mail](USPS-Intelligent-Mail) (USPS OneCode), [USPS FIM](USPS-FIM-Symbols), [Royal Mail](Royal-Mail) (RM4SCC, CBC), [Royal TNT Post](Royal-TNT-Post) (KIX), [Japan Post](Japan-Post), [Australia Post](Australia-Post), [Deutsche Post Identcode](Deutsche-Post-Identcode) (DHL Identcode), [Deutsche Post Leitcode](Deutsche-Post-Leitcode) (DHL Leitcode), [Pharmacode](Pharmacode) (Pharmaceutical Binary Code), [Two-track Pharmacode](Two-track Pharmacode) (Two-track Pharmaceutical Binary Code), [Italian-Pharmacode](Italian-Pharmacode) (Code 32, IMH), [PZN](PZN) (Pharmazentralnummer, PZN-8, PZN-7), [Code 39](Code-39) (Code 3 of 9, LOGMARS, Alpha39, USD-3, USD-2, USS-39), [Code 39 Extended](Code-39-Extended) (Code 39 Full ASCII), [Code 93](Code-93) (USD-7, USS-93), [Code 93 Extended](Code-93-Extended) (Code 93 Full ASCII), [Code 128](Code-128) (Code 128A, Code 128B, Code 128C, USD-6, USS-128), [Code 25](Code-25) (Code 2 of 5, Industrial 2 of 5, IATA 2 of 5, Data Logic 2 of 5, Matrix 2 of 5, COOP 2 of 5), [Interleaved 2 of 5](Interleaved-2-of-5) (ITF, Code 2 of 5 Interleaved, USD-1, USS-Interleaved 2 of 5), [Code 11](Code-11) (USD-8), [Codabar](Codabar) (Rationalized Codabar, Ames Code, NW-7, USD-4, USS-Codabar, Monarch, Code 2 of 7), [Plessey](Plessey) (Anker Code), [MSI Plessey](MSI-Plessey) (MSI, MSI Modified Plessey), [Telepen](Telepen) (Telepen Alpha, Telepen Full ASCII, Telepen Numeric), [Channel Code](Channel-Code), [PosiCode](PosiCode) (PosiCode A, PosiCode B), [BC412](BC412) (BC412 SEMI, BC412 IBM), [GS1 Composite Symbols](GS1-Composite-Symbols) (EAN-13 Composite, EAN-8 Composite, UPC-A Composite, UPC-E Composite, GS1 DataBar Omnidirectional Composite, GS1 DataBar Stacked Composite, GS1 DataBar Stacked Omni Composite, GS1 DataBar Truncated Composite, GS1 DataBar Limited Composite, GS1 DataBar Expanded Composite, GS1 DataBar Expanded Stacked Composite, GS1-128 Composite), [HIBC barcodes](HIBC-Symbols) (HIBC Code 39, HIBC Code 128, HIBC Data Matrix, HIBC PDF417, HIBC MicroPDF417, HIBC QR Code, HIBC Codablock F)\r\n\r\nIf it doesn't contain the format or feature you are looking for then take a look at the [outstanding features list](https://raw.github.com/bwipp/postscriptbarcode/master/TODO), make a request via the [issue tracker](https://github.com/bwipp/postscriptbarcode/issues) and check back soon.\r\n\r\nThe resource is modular so you need only include the definitions for the symbologies that you will produce within your target document or labels, making the resource very lightweight.\r\n\r\nSince this resource is written in PostScript and interpreted within the virtual machine of a printer it is compatible with virtually any hardware, operating system and application platform, for example Windows 95/XP on i386, Mac OS X/Linux on Power PC, Solaris on SPARC, and OpenVMS on Alpha AXP.\r\n\r\nSample Output\r\n-------------\r\n\r\nFor an online demonstration of the code's barcode generation capabilities take a look at this [web-based front end](http://www.terryburton.co.uk/barcodewriter/generator/).\r\n\r\nHere is a sample image obtained by running the current version of the code through Ghostscript and ImageMagick.\r\n\r\n![](wiki/images/barcode.jpg)\r\n\r\nUse\r\n---\r\n\r\nThe anticipated use of the code is to include the procedural definitions for the relevant encoder and renderer within the prologue of your own PostScript documents. You can use these to create and place your own barcodes as demonstrated in the samples within the [quick guide](wiki/Quick-Guide) and PostScript code. I usually use the PostScript code within a template file into which I substitute the barcode data string as a parameter using a language like Perl, Java or C++.\r\n\r\nIf you have a PostScript printer then you can avoid the need to embed the code within each of your documents by installing the code within your printer's PostScript virtual machine which will give the device barcode production capabilities for all subsequent jobs until it is reset. This effectively converts a commodity laser printer into a very capable barcode printer all through the use of uploaded barcode software, no font chips required.\r\n\r\nLicense\r\n-------\r\n\r\nAnybody is free to use and develop this code as they see fit, under the terms of the permissive [MIT/X-Consortium license](https://raw.github.com/bwipp/postscriptbarcode/master/LICENSE), which requires that developers attribute any derivative code to this project in both the source code and documentation. As such I take no liability for its use or misuse.\r\n\r\nSupport\r\n-------\r\n\r\nThe support is provided via the [project mailing list](https://groups.google.com/group/postscriptbarcode/topics) where you will normally find any questions or difficulties resolved quickly. Please do not email the author directly unless you are happy for your email to be reposted to the list.\r\n\r\nDocumentation\r\n-------------\r\n\r\nThe most complete reference for users and developers is this wiki.\r\n\r\nDownload\r\n--------\r\n\r\nThe current release is available for download in a number of formats from [here](https://github.com/bwipp/postscriptbarcode/releases/latest).\r\n\r\nBWIPP is essentially a set of generic PostScript Level 2 named resources that are provided in four flavours for ease of use. The one to use depends on how you intend to deploy the library.\r\n\r\n\"Packaged\" or \"unpackaged\": The named resources have been packaged for DSC conformance, portability and ease of distribution. You will most likely want to use a packaged flavour in production, however the unpackaged versions of the resources are useful for understanding the code, developing the library and debugging.\r\n\r\n\"Separate files\" or \"monolithic\": The resource is provided as separate files that are formatted for direct use by Adobe Distiller, GhostScript, a printer hard disk or a document manager. The monolithic flavours contain all of the resources in a single file that is suitable for inclusion in the Prolog section of a PostScript document template or installing to a printer's initial job VM.\r\n\r\nThis leads to the following set of four files.\r\n\r\nFor production use:\r\n\r\n  * `postscriptbarcode-packaged-resource` – Packaged; Separate files.\r\n  * `postscriptbarcode-monolithic-package` – Packaged; Monolithic file.\r\n\r\nFor BWIPP development:\r\n\r\n  * `postscriptbarcode-resource` – Unpackaged; Seperate files.\r\n  * `postscriptbarcode-monolithic` – Unpackaged; Monolithic file.\r\n\r\nBrowse or checkout the [source code](https://github.com/bwipp/postscriptbarcode) from the repository or view the [changelog](https://raw.github.com/bwipp/postscriptbarcode/master/CHANGES).\r\n\r\nStay up-to-date by following the [releases feed](https://github.com/bwipp/postscriptbarcode/releases.atom).\r\n\r\nFront Ends\r\n----------\r\n\r\nMany applications embed or plugin this PostScript resource thereby making available to their users a complete or partial implementation of the resource's features. The following is a list of known open source applications that make BWIPP barcodes available to their intended audience without the need to manipulate direct PostScript:\r\n\r\n  * [Web-based generator](http://www.terryburton.co.uk/barcodewriter/generator/) that is useful for feature testing or generating a small number of barcodes.\r\n  * [Scribus](http://www.scribus.net/) is a desktop publishing (DTP) application for Linux and Windows users.\r\n  * [KBarcode](http://sourceforge.net/projects/kbarcode/) (including [KBarcode4-Light](http://kde-apps.org/content/show.php/KBarcode4-light?content=128926)) is a WYSIWYG barcode and label printing application for Linux.\r\n  * [SAP](http://www.rjruss.info/p/barcodes-in-sap-with-barcode-writer-in.html) support is provided in the form of an output device type accessible from ABAP, SAPscript or Smart Forms.\r\n  * [pst-barcode](http://www.ctan.org/tex-archive/graphics/pstricks/contrib/pst-barcode/) is part of the PSTricks package for the LaTeX document publishing system.\r\n  * [Ruby Ghostscript Barcode](https://github.com/shairontoledo/rghost-barcode/wiki/) is part of the RGhost library for PDF document generation.\r\n  * [Elaphe](https://bitbucket.org/whosaysni/elaphe/) is a Python binding that renders barcodes using the Python Imaging Library.\r\nPostScript::Barcode is a Perl binding that renders barcodes using GSAPI.\r\n  * [bwip-js](https://code.google.com/p/bwip-js/) is a cross-compile of BWIPP to JavaScript that can run on any browser that natively supports the HTML canvas element.\r\n  * [Eloquence](http://eloquence.marxmeier.com/) is an environment for business applications whose eqpcl component provides BWIPP integration.\r\n\r\nResources\r\n---------\r\n\r\nThere are a number of different sample scripts and front-ends that make use of the project in the [contrib repository](https://github.com/bwipp/postscriptbarcode/tree/master/contrib).\r\n\r\nFor general discussion and help subscribe to the support and development [mailing list](https://groups.google.com/group/postscriptbarcode/topics).","google":"UA-187654-1","note":"Don't delete this file! It's used internally to help with page regeneration."}